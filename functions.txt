void ParseGNGGA(const char *st);
void mode_ind(char a);
void status(char a);
void speed(double a);
void lat(int deg);
void HDOP(double a);
void alt(double a);
void tot_sat(int a);
void QI(unsigned short int numb);
void longt(int deg);
void time(int inp_time);
void geo_sep(double a);
void age(int a);
void DGPS(int a);
void date(int a);
int checksum(const char *s);
void N_S(const char *a);
void E_W(const char *a);





void time( int inp_time)
{
   short int hh,mm,ss,rm;
    hh=(inp_time)/(60*60);
    rm=inp_time%(60*60);
    mm=rm/60;
    ss=rm%60;
    printf("\nTIME : %d:%d:%d",hh,mm,ss);
}
void N_S(const char *a)
{
    if(*a=='N')
        printf("\nPosition:North");
    else
        printf("\nPosition:South");
}

void E_W(const char *a)
{
    if(*a=='E')
        printf("\nPosition:East");
    else
        printf("\nPosition:West");
}

void lat(int deg)
{
   short int d;
   short int m;

   d=deg/100;
   m=deg%100;

   printf("\nLatitude : %d degree %d'",d,m);

}
void longt(int deg)
{
   short int d;
   short int m;

   d=deg/100;
   m=deg%100;

   printf("\nLongitude : %d degree %d'",d,m);
}
void QI(unsigned short int numb)
{
    printf("\nQuality indicator : ");
    switch(numb)
    {
        case 0:printf("position fix unavailable");
                break;
        case 1:printf("valid position fix,SPS mode");
                break;
        case 2: printf("valid position fix,differencial GPS mode");
                break;
        case 3: printf("GPS PPS mode,fixed valid");
                break;
        case 6:printf("estimated (dead reckoning) mode");
                break;
    }
}
void tot_sat(int a)
{
    if(a<28 && a>0)
        printf("\nStatellite count : %d",a);
    else
        printf("\nsatellite count : ERROR");
}
void HDOP(double a)
{
    if(a<99.9 && a>0.0)
        printf("\nHorizontal Dilution Of Precision : %f",a);
    else
        printf("\nHDOP:ERROR");
}
void alt(double a)
{
    if(a<17999.9 && a>-9999.9)
        printf("\naltitude : %f",a);
    else
        printf("\nERROR");
}
void geo_sep(double a)
{
    printf("\nGeodial Seperation in meters : %f",a);
}
void age(int a)
{
    if(a== NULL)
        printf("\nAge : NILL");
    else
        printf("\nAge : %d",a);
}
void DGPS(int a)
{
    if(a<1023 && a>0)
        printf("\nDGPS station ID : %d",a);
}

void speed(double a)
{
    if(a<999.9 && a>=000.0)
        printf("\nspeed over ground : %f ",a);
    else
        printf("\nspeed over ground : ERROR");
}
void status(char a)
{
    if(a=='A')
        printf("\nStatus : Data valid");
    else if(a=='V')
        printf("\nStatus : Navigation recieving warning");
}
void mode_ind(char a)
{
    switch(a)
    {
        case 'N':printf("\nMode indicator : Data not valid");
                 break;
        case 'A':printf("\nMode indicator : Autonomous mode");
                 break;
        case 'D':printf("\nMode indicator : differential mode");
                 break;
        case 'E':printf("\nMode indicator : Estimated mode");
                 break;
    }


}

void date(int a)
{
    int dd,mm,yy,qm;
    yy=a%100;
    qm=a/100;
    mm=qm%100;
    dd=qm/100;
    printf("\nDate : %d/%d/%d",dd,mm,yy);
}
